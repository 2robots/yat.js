// Generated by CoffeeScript 1.3.3
(function() {

  (function($, window) {
    var YatWrapper, defaults, document, pluginName;
    pluginName = 'yat';
    document = window.document;
    defaults = {
      selectors: {
        items: null,
        shorttitle: null,
        date: null,
        content: null,
        category: null,
        tags: null,
        important: null
      },
      callbacks: {
        alterItems: function(elements) {
          return elements;
        },
        alterShorttitle: function(element) {
          return element.text();
        },
        alterDate: function(element) {
          return new Date(moment(element.text()));
        },
        alterContent: function(element) {
          return element.html();
        },
        alterCategory: function(element) {
          return element.text();
        },
        alterTags: function(element) {
          if (element.text().length > 0) {
            return element.text().split(", ");
          } else {
            return [];
          }
        },
        alterImportant: function(element) {
          return false;
        },
        beforeInit: null,
        afterInit: null
      },
      attributes: ['shorttitle', 'date', 'content', 'category', 'tags', 'important']
    };
    YatWrapper = (function() {
      var items;

      items = [];

      function YatWrapper(element, selectors, containerElement, callbacks, attributes) {
        this.element = element;
        this.containerElement = containerElement;
        this.options = {};
        this.options.selectors = $.extend({}, defaults.selectors, selectors);
        this.options.callbacks = $.extend({}, defaults.callbacks, callbacks);
        this.options.attributes = $.extend({}, defaults.attributes, attributes);
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
      }

      YatWrapper.prototype.init = function() {
        var t;
        t = this;
        $(this.element).find(this.options.selectors.items).each(function(i, v) {
          return t.registerChild(v);
        });
        return this.initBackbone();
      };

      YatWrapper.prototype.initBackbone = function() {
        $(this.element).hide();
        return new window.yat.App({
          items: items,
          containerElement: this.containerElement
        });
      };

      YatWrapper.prototype.registerChild = function(child) {
        var cb_name, i, n, obj, t, val, _ref;
        t = this;
        obj = {};
        _ref = this.options.attributes;
        for (n in _ref) {
          i = _ref[n];
          cb_name = 'alter' + t.ucfirst(i);
          val = $(child).find(this.options.selectors[i]);
          if (val.length === 0) {
            val = $(child).filter(this.options.selectors[i]);
          }
          if (val.length > 0 && this.options.callbacks[cb_name] !== void 0) {
            obj[i] = this.options.callbacks[cb_name](val);
          } else {
            obj[i] = void 0;
          }
        }
        if (obj.content !== void 0 && obj.shorttitle !== void 0 && obj.date !== void 0) {
          return items.push(obj);
        }
      };

      YatWrapper.prototype.ucfirst = function(str) {
        var f;
        str += '';
        return f = str.charAt(0).toUpperCase() + str.substr(1);
      };

      return YatWrapper;

    })();
    return $.fn[pluginName] = function(selectors, callbacks, attributes) {
      return this.each(function() {
        if (!$.data(this, "plugin_" + pluginName)) {
          return $.data(this, "plugin_" + pluginName, new YatWrapper(this, selectors, callbacks, attributes));
        }
      });
    };
  })(jQuery, window);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {

  window.yat = window.yat || {};

  window.yat.NavigationViewManager = (function() {

    function _Class(model, options) {
      this.model = model;
      this.options = options;
      this.initialize();
      this.index = 0;
    }

    _Class.prototype.initialize = function() {
      this.paneWidth = this.options.element_width * (this.model.length / 1.0) + this.options.margin_left + this.options.margin_right;
      this.startEnd = this.model.getStartEnd();
      this.interval = Math.abs(moment(this.startEnd.start).diff(this.startEnd.end, 'days'));
      return this.pixelPerDay = Math.round(this.paneWidth / this.interval);
    };

    _Class.prototype.hasRenderCandidate = function() {
      return this.index < this.model.models.length;
    };

    _Class.prototype.getNextElement = function() {
      var days, item;
      item = this.model.at(this.index++);
      days = moment(item.get('date')).diff(this.startEnd.start, 'days');
      return {
        position: days * this.pixelPerDay + this.options.margin_left,
        model: item
      };
    };

    _Class.prototype.updateViewport = function(viewportPos) {
      this.viewportPos = viewportPos;
    };

    _Class.prototype.get_date_for_offset = function(offset) {
      var days, daysTotal, end, start, widthInDays;
      start = moment(this.startEnd.start).clone();
      end = moment(this.startEnd.end).clone();
      daysTotal = end.diff(start, 'days');
      days = offset / this.pixelPerDay;
      widthInDays = Math.round(this.viewportPos.width / this.pixelPerDay);
      days += (days / (daysTotal - widthInDays)) * widthInDays;
      return start.add('days', days);
    };

    _Class.prototype.get_offset_for_date = function(date) {
      var d, daysTotal, end, r, start, widthInDays;
      start = moment(this.startEnd.start).clone();
      end = moment(this.startEnd.end).clone();
      daysTotal = end.diff(start, 'days');
      widthInDays = this.viewportPos.width / this.pixelPerDay;
      r = moment(date).clone().diff(this.startEnd.start, 'days');
      d = Math.round(r / (1 + (widthInDays / (daysTotal - widthInDays))));
      return d * this.pixelPerDay;
    };

    _Class.prototype.get_percentage_for_offset = function(offset) {
      var daysTotal, end, start;
      start = moment(this.startEnd.start).clone();
      end = moment(this.startEnd.end).clone();
      daysTotal = end.diff(start, 'days');
      return offset / (daysTotal * this.pixelPerDay);
    };

    _Class.prototype.get_offset_for_percentage = function(percentage) {
      var daysTotal, end, start;
      start = moment(this.startEnd.start).clone();
      end = moment(this.startEnd.end).clone();
      daysTotal = end.diff(start, 'days');
      return daysTotal * this.pixelPerDay * percentage;
    };

    return _Class;

  })();

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {

  window.yat = window.yat || {};

  window.yat.templates = {
    timelineContainer: _.template('<div class="yat-timeline"><div class="yat-timeline-inner1"></div></div>'),
    timelineFullScreen: _.template('<a class="yat-fullscreen-start">Zur Vollansicht wechseln.</a>'),
    timelineFullScreenEnd: _.template('<a class="yat-fullscreen-end">Zur Normalansicht wechseln.</a>'),
    timelineViewportElementList: _.template('<div class="yat-inner"><ol class="yat-elements"></ol></div>'),
    timelineViewportElement: _.template('<div class="yat-element-inner"><div class="yat-element-inner2"><%= content %></div></div><span class="arrow"></span><a class="close" href="javascript:void(0);">Close</a>'),
    timelineViewportReadMore: _.template('<span class="yat-readmore">weiterlesen</span>'),
    timelineViewportNavlinks: _.template('<div class="yat-navlinks"><span class="yat-left"><a href="javascript:void(0);">Nach links navigieren</a></span><span class="yat-right"><a href="javascript:void(0);">Nach rechts navigieren</a></span></div>'),
    timelineOverview: _.template('<ol class="yat-years"></ol>'),
    timelineOverviewYear: _.template('<li style="width: <%= width %>;"><span><%= year %></span></li>'),
    timelineOverviewSelection: _.template('<div class="yat-current-position"><div class="yat-position-container"><div class="yat-position-inner">Aktueller Ausschnitt</div></div></div>'),
    timelineOverviewQuarter: _.template('<span style="left:<%= offset %>%;" class="quarter <%= className %>"><%= title %></span>'),
    timelineNavigation: _.template('<div class="yat-navigation"></div>'),
    timelineNavigationElementList: _.template('<ol class="yat-elements"></ol>'),
    timelineNavigationElement: _.template('<a href="<%= linkHref %>"><%= shorttitle %></a>'),
    timelineNavigationNavlinks: _.template('<div class="yat-navlinks"><span class="yat-left"><a href="javascript:void(0);">In der Navigation nach links navigieren</a></span><span class="yat-right"><a href="javascript:void(0);">In der Navigation nach rechts navigieren</a></span></div>'),
    timelineNavigationPlaceholder: _.template('<li class="yat-navigation-placeholder-right"></li>')
  };

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.yat = window.yat || {};

  window.yat.OverviewView = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.className = 'yat-timeline-overview';

    _Class.prototype.options = {
      animation_duration: 200,
      quarter_dateformat: 'D.M.'
    };

    _Class.prototype.selection_element = void 0;

    _Class.prototype.current_date = void 0;

    _Class.prototype.current_position = void 0;

    _Class.prototype.initialize = function() {
      this.scrollLeft = 0;
      return this.render();
    };

    _Class.prototype.resize = function() {
      var scroll_inner_width;
      scroll_inner_width = parseInt(this.selection_element.find('.yat-position-inner').width(), 10);
      this.selection_element.find('.yat-position-container').css('width', '100%');
      this.selection_element.find('.yat-position-container').css('padding-left', this.$el.width() - scroll_inner_width + 'px');
      this.selection_element.find('.yat-position-container').css('padding-right', 0);
      this.selection_element.find('.yat-position-container').css('left', '1px');
      if (this.current_position != null) {
        if (typeof this.current_position === 'number') {
          return this.jump_to_percentage(this.current_position);
        } else {
          return this.jump_to(this.current_position);
        }
      }
    };

    _Class.prototype.render = function() {
      var overview, that;
      that = this;
      overview = $(window.yat.templates.timelineOverview());
      this.selection_element = $(window.yat.templates.timelineOverviewSelection());
      setTimeout((function() {
        return that.resize();
      }), 10);
      that.selection_element.find('.yat-position-container').bind('resize', (function() {
        if (that.current_date != null) {
          return that.jump_to(that.current_date);
        }
      }));
      this.$el.html(overview);
      this.$el.append(this.selection_element);
      this.selection_element.parent().bind('mouseup', function(event) {
        return that.options.dispatcher.trigger('overview_jump_to', that.get_date_for_offset(event.pageX - $('.yat-current-position').offset().left));
      });
      $(window).resize(function() {
        return setTimeout((function() {
          return that.resize();
        }), 10);
      });
      that.options.dispatcher.on('fullscreen_start', function() {
        return setTimeout((function() {
          return that.resize();
        }), 10);
      });
      that.options.dispatcher.on('fullscreen_end', function() {
        return setTimeout((function() {
          return that.resize();
        }), 10);
      });
      that.options.dispatcher.on('overview_jump_to', function() {
        var animate;
        animate = true;
        if (arguments.length > 1) {
          animate = arguments[1];
        }
        return that.jump_to(arguments[0], animate);
      });
      this.$el.find('.yat-current-position').scroll(function() {
        var offset;
        offset = that.get_percentage_for_offset($(this).scrollLeft());
        if (that.scrollLeft !== $(this).scrollLeft()) {
          return that.options.dispatcher.trigger('overview_position_change', offset);
        }
      });
      this.options.dispatcher.on('navigation_position_change', function(percentage) {
        return that.jump_to_percentage(percentage, false);
      });
      return this.options.dispatcher.on('navigation_elements_positioned', function(years) {
        return that.render_quarters(overview, years);
      });
    };

    _Class.prototype.render_quarters = function(overview, years) {
      var last_year, that;
      that = this;
      last_year = _.last(years);
      last_year.width -= 0.002;
      return _.each(years, function(y) {
        var className, year_view;
        year_view = jQuery(window.yat.templates.timelineOverviewYear({
          year: y.start.year(),
          width: Math.round(10000 * y.width) / 100 + '%'
        }));
        if (moment([y.start.year(), 0]).isSame(y.start, 'day')) {
          className = 'first';
        } else {
          className = '';
        }
        year_view.append(window.yat.templates.timelineOverviewQuarter({
          offset: 100 * y.left,
          title: '',
          className: className
        }));
        _.each(y.quarters, function(q) {
          return year_view.append(window.yat.templates.timelineOverviewQuarter({
            offset: 100 * q.left,
            title: '',
            className: ''
          }));
        });
        overview.append(year_view);
        if (year_view.width() < 32) {
          return year_view.find('span:first').empty();
        }
      });
    };

    _Class.prototype.jump_to_percentage = function(percentage, animate) {
      var left, slider_width, width;
      left = this.get_offset_for_percentage(percentage);
      width = $('.yat-current-position').width();
      slider_width = $('.yat-position-inner').width();
      this.scrollLeft = Math.floor(width - left) - slider_width;
      if (animate) {
        this.$el.find('.yat-current-position').animate({
          scrollLeft: this.scrollLeft
        }, this.options.animation_duration);
      } else {
        this.$el.find('.yat-current-position').scrollLeft(this.scrollLeft);
      }
      return this.current_position = percentage;
    };

    _Class.prototype.jump_to = function(date, animate) {
      var left, slider_width, width;
      left = this.get_offset_for_date(date);
      width = $('.yat-current-position').width();
      slider_width = $('.yat-position-inner').width();
      this.scrollLeft = Math.floor(width - left - slider_width / 2);
      if (animate) {
        this.$el.find('.yat-current-position').animate({
          scrollLeft: this.scrollLeft
        }, this.options.animation_duration);
      } else {
        this.$el.find('.yat-current-position').scrollLeft(this.scrollLeft);
      }
      return this.current_date = date;
    };

    _Class.prototype.get_percentage_for_offset = function(offset) {
      var slider_width, width;
      width = $('.yat-current-position').width();
      slider_width = $('.yat-position-inner').width();
      return 1 - (offset / (width - slider_width));
    };

    _Class.prototype.get_offset_for_percentage = function(percentage) {
      var slider_width, width;
      width = $('.yat-current-position').width();
      slider_width = $('.yat-position-inner').width();
      return percentage * (width - slider_width);
    };

    _Class.prototype.get_offset_for_date = function(date) {
      var end, start, width;
      date.startOf('day');
      width = $('.yat-current-position').width();
      start = moment(this.model.start);
      end = moment(this.model.end);
      return (date.diff(start) / end.diff(start)) * width;
    };

    _Class.prototype.get_date_for_offset = function(offset) {
      var end, percentage, start, width;
      width = $('.yat-current-position').width();
      percentage = offset / width;
      start = moment(this.model.start);
      end = moment(this.model.end);
      return moment(start).add(end.diff(start) * percentage).startOf('day');
    };

    return _Class;

  })(Backbone.View);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.yat = window.yat || {};

  window.yat.viewportItemView = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.tagName = 'li';

    _Class.prototype.initialize = function() {
      this.inDom = false;
      return this.render();
    };

    _Class.prototype.render = function() {
      var that;
      this.inDom = true;
      this.$el.html(window.yat.templates.timelineViewportElement(this.model.toJSON()));
      that = this;
      if (that.model.get('important')) {
        that.$el.addClass('important');
      }
      return setTimeout((function() {
        if ($(that.$el).find('.yat-element-inner2').height() > ($(that.$el).find('.yat-element-inner').height() - 25)) {
          that.$el.addClass('overflow');
          return that.$el.append(window.yat.templates.timelineViewportReadMore);
        }
      }));
    };

    return _Class;

  })(Backbone.View);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.yat = window.yat || {};

  window.yat.ViewportView = (function(_super) {
    var rendered_count;

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.className = 'yat-viewport';

    _Class.prototype.total_index = 0;

    _Class.prototype.current_scroll_position = 0;

    _Class.prototype.options = {
      animation_duration: 200,
      initial_element_count: 4,
      id_prefix: ''
    };

    _Class.prototype.disable_load_more_till_scrollend = false;

    _Class.prototype.current_direction = 'both';

    _Class.prototype.not_rendered_yet = {};

    _Class.prototype.not_rendered_yet_position = 0;

    _Class.prototype.not_rendered_yet_current_element = void 0;

    rendered_count = 0;

    _Class.prototype.initialize = function() {
      return this.render();
    };

    _Class.prototype.remove = function() {
      return Backbone.View.prototype.remove.call(this);
    };

    _Class.prototype.render = function() {
      var navlinks, that, viewport;
      that = this;
      that.options.dispatcher.trigger('load_component_start');
      viewport = $(window.yat.templates.timelineViewportElementList());
      navlinks = $(window.yat.templates.timelineViewportNavlinks());
      this.$el.html(viewport);
      this.$el.append(navlinks);
      this.total_index = this.model.length;
      _(this.total_index).times(function(n) {
        return that.not_rendered_yet[n] = false;
      });
      setTimeout((function() {
        that.$el.find('ol.yat-elements').css('width', 0);
        return _.times(that.options.initial_element_count, (function() {
          that.insert_next_element();
          return that.options.dispatcher.trigger('load_component_end');
        }));
      }), 10);
      return this.registerEventListener();
    };

    _Class.prototype.registerEventListener = function() {
      var that;
      that = this;
      this.yat_inner = this.$el.find('> .yat-inner');
      this.yat_elements = this.$el.find('> .yat-inner > .yat-elements');
      this.$el.find('> .yat-inner').bind('touchmove', function() {
        return that.options.dispatcher.trigger('viewport_position_change', direction);
      });
      this.$el.find('> .yat-inner').scroll(function() {
        var direction;
        direction = 'left';
        if (that.current_scroll_position < that.$el.find('> .yat-inner').scrollLeft()) {
          direction = 'right';
        }
        that.current_scroll_position = that.$el.find('> .yat-inner').scrollLeft();
        return that.options.dispatcher.trigger('viewport_position_change', direction);
      });
      this.$el.find('> .yat-inner').bind('scrollstart', function() {
        return that.options.dispatcher.trigger('viewport_scrollstart');
      });
      this.$el.find('> .yat-inner').bind('scrollstop', function() {
        return that.options.dispatcher.trigger('viewport_scrollstop', that.getCurrentElementModel());
      });
      this.$el.find('.yat-navlinks .yat-left a').click(function() {
        that.options.dispatcher.trigger('viewport_prev');
        return that.options.dispatcher.trigger('viewport_item_deselect');
      });
      this.$el.find('.yat-navlinks .yat-right a').click(function() {
        that.options.dispatcher.trigger('viewport_next');
        return that.options.dispatcher.trigger('viewport_item_deselect');
      });
      that.options.dispatcher.on('viewport_jump_to', function() {
        that.disable_load_more_till_scrollend = true;
        return that.jump_to(arguments[0], arguments[1]);
      });
      that.options.dispatcher.on('viewport_prev', function() {
        var element;
        element = _.first(that.getCurrentElements()).prev();
        that.insert_prev_element(that.getCurrentElements().length + 2);
        that.disable_load_more_till_scrollend = true;
        return that.options.dispatcher.trigger('viewport_jump_to', element);
      });
      that.options.dispatcher.on('viewport_next', function() {
        var element;
        element = _.last(that.getCurrentElements()).next();
        that.insert_next_element(that.getCurrentElements().length + 2);
        that.disable_load_more_till_scrollend = true;
        return that.options.dispatcher.trigger('viewport_jump_to', element);
      });
      that.options.dispatcher.on('viewport_item_select', function() {
        return that.open_element(arguments[0]);
      });
      that.options.dispatcher.on('viewport_item_deselect', function() {
        return that.close_open_element(arguments[0]);
      });
      that.options.dispatcher.on('viewport_position_change', function() {
        if (that.yat_inner.scrollLeft() > (that.yat_elements.width() - that.yat_inner.width())) {
          that.$el.find('.yat-navlinks .yat-right').addClass('inactive');
        } else if (that.yat_inner.scrollLeft() <= 0) {
          that.$el.find('.yat-navlinks .yat-left').addClass('inactive');
        } else {
          that.$el.find('.yat-navlinks .yat-right').removeClass('inactive');
          that.$el.find('.yat-navlinks .yat-left').removeClass('inactive');
        }
        return that.load_more(arguments[0]);
      });
      that.options.dispatcher.on('viewport_scrollstop', function() {
        that.disable_load_more_till_scrollend = false;
        return that.current_direction = 'both';
      });
      return that.options.dispatcher.on('navigation_element_selected', function(navigationView) {
        var el, index, position;
        position = _.indexOf(that.model.models, navigationView.model);
        if (that.not_rendered_yet[position] === false) {
          if (that.not_rendered_yet_position > position) {
            index = that.find_prev_not_rendered_element();
            if (index <= that.total_index) {
              el = jQuery('#' + that.options.id_prefix + (that.model.at(index + 1)).cid);
            } else {
              el = void 0;
            }
            that.insert_element_at_position(position, el, void 0);
          } else {
            index = that.find_next_not_rendered_element();
            if (index > 0) {
              el = jQuery('#' + that.options.id_prefix + (that.model.at(index - 1)).cid);
            } else {
              el = void 0;
            }
            that.insert_element_at_position(position, void 0, el);
          }
          that.insert_prev_element(that.getCurrentElements().length + 2);
          that.insert_next_element(that.getCurrentElements().length + 2);
        }
        that.disable_load_more_till_scrollend = true;
        that.jump_to($('#' + that.options.id_prefix + navigationView.model.cid));
        this.not_rendered_yet_current_element = $('#' + that.options.id_prefix + navigationView.model.cid);
        return this.not_rendered_yet_position = position;
      });
    };

    _Class.prototype.getCurrentElements = function() {
      var alternative_elements, current_elements, scroll_l, scroll_r;
      scroll_l = this.$el.find('> .yat-inner').scrollLeft();
      scroll_r = scroll_l + this.$el.find('> .yat-inner').width();
      alternative_elements = [];
      current_elements = [];
      this.$el.find('ol.yat-elements').children().each(function() {
        var el_width;
        el_width = $(this).outerWidth() + parseInt($(this).css('margin-left'), 10) + parseInt($(this).css('margin-right'), 10);
        if ($(this).position().left >= scroll_l && ($(this).position().left + el_width) <= scroll_r) {
          current_elements.push($(this));
        }
        if ($(this).position().left >= scroll_l - el_width && ($(this).position().left + el_width) <= scroll_r + el_width) {
          alternative_elements.push($(this));
        }
        if ($(this).position().left > scroll_r) {
          return false;
        }
      });
      if (current_elements.length > 0) {
        return current_elements;
      } else {
        return alternative_elements;
      }
    };

    _Class.prototype.getCurrentElement = function() {
      var center, elements, index, right_element;
      elements = this.getCurrentElements();
      index = parseInt(elements.length / 2, 10);
      if (elements.length % 2 === 0) {
        right_element = elements[parseInt(elements.length / 2, 10)];
        center = this.$el.find('> .yat-inner').scrollLeft() + parseInt(this.$el.width() / 2);
        if (right_element.position().left > center) {
          index = index - 1;
        }
      }
      return elements[index];
    };

    _Class.prototype.getCurrentElementModels = function() {
      var elements, that;
      that = this;
      elements = [];
      _.each(this.getCurrentElements(), (function(element) {
        return elements.push({
          dom: element,
          model: that.model.get(element.attr('id').substr(that.options.id_prefix.length))
        });
      }));
      return elements;
    };

    _Class.prototype.getCurrentElementModel = function() {
      var element;
      element = this.getCurrentElement();
      return [
        {
          dom: element,
          model: this.model.get(element.attr('id').substr(this.options.id_prefix.length))
        }
      ];
    };

    _Class.prototype.find_next_not_rendered_element = function() {
      var index;
      index = this.not_rendered_yet_position;
      while (index < this.total_index) {
        if (this.not_rendered_yet[index] === false) {
          return index;
        }
        index++;
      }
      return this.total_index;
    };

    _Class.prototype.find_prev_not_rendered_element = function() {
      var index;
      index = this.not_rendered_yet_position;
      while (index >= 0) {
        if (this.not_rendered_yet[index] === false) {
          return index;
        }
        index--;
      }
      return 0;
    };

    _Class.prototype.insert_next_element = function(count) {
      var that;
      that = this;
      if (count === void 0) {
        count = 1;
      }
      return _(count).times(function() {
        var el, index;
        index = that.find_next_not_rendered_element();
        if (index > 0) {
          el = jQuery('#' + that.options.id_prefix + (that.model.at(index - 1)).cid);
        } else {
          el = void 0;
        }
        return that.insert_element_at_position(index, void 0, el);
      });
    };

    _Class.prototype.insert_prev_element = function(count) {
      var that;
      that = this;
      if (count === void 0) {
        count = 1;
      }
      return _(count).times(function() {
        var el, index;
        index = that.find_prev_not_rendered_element();
        if (index <= that.total_index) {
          el = jQuery('#' + that.options.id_prefix + (that.model.at(index + 1)).cid);
        } else {
          el = void 0;
        }
        return that.insert_element_at_position(index, el, void 0);
      });
    };

    _Class.prototype.insert_element_at_position = function(position, before, after) {
      var all, element, element_view, model, that;
      if (this.not_rendered_yet[position] === false) {
        that = this;
        model = this.model.at(position);
        element_view = new window.yat.viewportItemView({
          model: model
        });
        element = null;
        if (before !== void 0 && before[0] !== void 0) {
          before.before(element_view.$el);
          element = before.prev();
          this.change_list_width(this.element_width(element));
          this.$el.find('> .yat-inner').scrollLeft(this.$el.find('> .yat-inner').scrollLeft() + this.element_width(element));
        } else if (after !== void 0 && after[0] !== void 0) {
          after.after(element_view.$el);
          element = after.next();
          this.change_list_width(this.element_width(element));
        } else {
          all = this.$el.find('ol.yat-elements').append(element_view.$el);
          element = all.children().last();
          this.change_list_width(this.element_width(element));
        }
        element.attr('id', this.options.id_prefix + model.cid);
        element.click(function() {
          if ($(this).hasClass('overflow')) {
            if ($(this).hasClass('open')) {
              return that.options.dispatcher.trigger('viewport_item_deselect');
            } else {
              return that.options.dispatcher.trigger('viewport_item_select', $(this));
            }
          }
        });
        element.data('yat-position', position);
        this.not_rendered_yet[position] = true;
        this.not_rendered_yet_position = position;
        this.not_rendered_yet_current_element = element;
        return rendered_count++;
      }
    };

    _Class.prototype.load_more = function(direction) {
      if (rendered_count < this.total_index && !this.disable_load_more_till_scrollend) {
        if (direction === 'left' && this.current_direction !== 'right') {
          this.current_direction = 'left';
          this.insert_prev_element();
        } else if (this.current_direction !== 'left') {
          this.current_direction = 'right';
          this.insert_next_element();
        }
        return true;
      }
      return false;
    };

    _Class.prototype.jump_to = function() {
      var cb, container_width, element_width;
      if (arguments[0][0] !== void 0) {
        container_width = this.$el.find('> .yat-inner').outerWidth();
        element_width = arguments[0].outerWidth() + parseInt(arguments[0].css("margin-left"), 10) + parseInt(arguments[0].css("margin-right"), 10);
        cb = arguments[2];
        if (arguments[1] !== void 0 && arguments[1] === false) {
          this.$el.find('> .yat-inner').scrollLeft(arguments[0].position().left - (container_width / 2 - element_width / 2));
        } else {
          this.$el.find('> .yat-inner').animate({
            scrollLeft: arguments[0].position().left - (container_width / 2 - element_width / 2)
          }, {
            duration: this.options.animation_duration,
            complete: function() {
              if (cb !== void 0) {
                return cb();
              }
            }
          });
        }
        this.not_rendered_yet_position = arguments[0].data("yat-position");
        return this.not_rendered_yet_current_element = arguments[0];
      }
    };

    _Class.prototype.open_element = function() {
      var element, new_element_width, old_element_width, that;
      that = this;
      this.close_open_element();
      element = arguments[0];
      old_element_width = this.element_width(element);
      element.addClass('open');
      new_element_width = this.element_width(element);
      this.change_list_width(new_element_width - old_element_width, true);
      this.disable_load_more_till_scrollend = true;
      return this.jump_to(element, true, (function() {
        return this.disable_load_more_till_scrollend = false;
      }));
    };

    _Class.prototype.close_open_element = function() {
      var element, new_element_width, old_element_width, that;
      that = this;
      if (this.$el.find('ol.yat-elements li.open').length > 0) {
        element = this.$el.find('ol.yat-elements li.open').first();
        old_element_width = this.element_width(element);
        this.$el.find('ol.yat-elements li.open').removeClass('open');
        new_element_width = this.element_width(element);
        return this.change_list_width(new_element_width - old_element_width, true);
      }
    };

    _Class.prototype.element_width = function(element) {
      return element.outerWidth() + parseInt(element.css('margin-left'), 10) + parseInt(element.css('margin-right'), 10);
    };

    _Class.prototype.change_list_width = function(width) {
      width = parseInt(this.$el.find('ol.yat-elements').css('width'), 10) + width;
      return this.$el.find('ol.yat-elements').css('width', width);
    };

    return _Class;

  })(Backbone.View);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.yat = window.yat || {};

  window.yat.NavigationElementView = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.tagName = 'li';

    _Class.prototype.events = {
      'click': function() {
        this.options.dispatcher.trigger('navigation_element_selected', this);
        return false;
      }
    };

    _Class.prototype.initialize = function() {
      return this.render();
    };

    _Class.prototype.render = function() {
      this.$el.append(window.yat.templates.timelineNavigationElement({
        shorttitle: this.model.get('shorttitle'),
        linkHref: '#'
      }));
      if (this.model.get('category') !== void 0) {
        return this.$el.addClass('cat-' + this.model.get('category'));
      }
    };

    _Class.prototype.width = function() {
      return this.$el.width();
    };

    return _Class;

  })(Backbone.View);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var _activated_elements, _lastElements, _viewportPos,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.yat = window.yat || {};

  _viewportPos = {
    left: 0,
    right: 0
  };

  _lastElements = [];

  _activated_elements = [];

  window.yat.NavigationView = (function(_super) {
    var mainElement;

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.options = {
      position: {
        top: '2.5'
      },
      id_prefix: '',
      id_postfix: '',
      vertical_offset: 5,
      horizontal_offset: 5,
      navigation_height: 100,
      margin_left: 30,
      margin_right: 30
    };

    mainElement = void 0;

    _Class.prototype.className = 'yat-navigation';

    _Class.prototype.initialize = function() {
      var navlinks;
      this.options.dispatcher.trigger('load_component_start');
      this.viewManager = new window.yat.NavigationViewManager(this.model, {
        element_width: 200,
        margin_left: this.options.margin_left,
        margin_right: this.options.margin_right
      });
      this.elementList = $(window.yat.templates.timelineNavigationElementList());
      this.mainElement = $("<div class='yat-inner' />");
      this.mainElement.append(this.elementList);
      this.navigation_width = 0;
      navlinks = $(window.yat.templates.timelineNavigationNavlinks());
      this.$el.html(this.mainElement);
      this.$el.append(navlinks);
      this.registerEventListener();
      return this.render();
    };

    _Class.prototype._updateViewportPos = function() {
      var scrollLeft;
      scrollLeft = this.mainElement.scrollLeft();
      _viewportPos = {
        left: scrollLeft,
        right: scrollLeft + this.mainElement.width(),
        width: this.mainElement.width()
      };
      return this.viewManager.updateViewport(_viewportPos);
    };

    _Class.prototype.offset_to_percentage = function(offset) {
      return offset / (this.navigation_width - this.mainElement.width() - this.options.horizontal_offset + this.options.margin_right);
    };

    _Class.prototype.percentage_to_offset = function(percentage) {
      return percentage * (this.navigation_width - this.mainElement.width() - this.options.horizontal_offset + this.options.margin_right);
    };

    _Class.prototype.registerEventListener = function() {
      var that;
      that = this;
      this.startEnd = that.model.getStartEnd();
      this.yat_inner = this.$el.find('> .yat-inner');
      this.yat_elements = this.$el.find('> .yat-inner > .yat-elements');
      this.mainElement.bind('touchmove', function() {
        return that.options.dispatcher.trigger('navigation_position_change', that.viewManager.get_date_for_offset(that.mainElement.scrollLeft()));
      });
      this.mainElement.scroll(function() {
        var offset;
        offset = that.mainElement.scrollLeft();
        that.scrollOffset = offset;
        return that.options.dispatcher.trigger('navigation_position_change', that.offset_to_percentage(offset));
      });
      this.options.dispatcher.on('viewport_scrollstop', function(elements) {
        var index;
        that.activate_elements(elements);
        if (_.first(arguments[0]).model.get("date") === that.startEnd.start) {
          return that.jump_to_cid(_.first(arguments[0]).model.cid, true);
        } else if (_.last(arguments[0]).model.get("date") === that.startEnd.end) {
          return that.jump_to_cid(_.last(arguments[0]).model.cid, true);
        } else {
          if (arguments[0].length % 2 !== 0) {
            index = (arguments[0].length - 1) / 2;
          } else {
            index = arguments[0].length / 2;
          }
          return that.jump_to_cid(arguments[0][index].model.cid, true);
        }
      });
      this.options.dispatcher.on('navigation_position_change', function() {
        var percentage;
        percentage = that.offset_to_percentage(that.mainElement.scrollLeft());
        if (percentage >= 1) {
          that.$el.find('.yat-navlinks .yat-right').addClass('inactive');
        } else if (percentage <= 0) {
          that.$el.find('.yat-navlinks .yat-left').addClass('inactive');
        } else {
          that.$el.find('.yat-navlinks .yat-right').removeClass('inactive');
          that.$el.find('.yat-navlinks .yat-left').removeClass('inactive');
        }
        return that._updateViewportPos();
      });
      this.options.dispatcher.on('overview_position_change', function(percentage) {
        return that.jump_to_percentage(percentage, false);
      });
      this.$el.find('.yat-navlinks .yat-left a').click(function() {
        return that.options.dispatcher.trigger('navigation_prev');
      });
      this.$el.find('.yat-navlinks .yat-right a').click(function() {
        return that.options.dispatcher.trigger('navigation_next');
      });
      this.options.dispatcher.on('navigation_prev', function() {
        var current_position, offset, percentage;
        current_position = that.offset_to_percentage(that.mainElement.scrollLeft());
        offset = (that.elementList.parent().width() / that.viewManager.paneWidth) / 2;
        percentage = current_position - offset;
        return that.jump_to_percentage(percentage, true);
      });
      return this.options.dispatcher.on('navigation_next', function() {
        var current_position, offset, percentage;
        current_position = that.offset_to_percentage(that.mainElement.scrollLeft());
        offset = (that.elementList.parent().width() / that.viewManager.paneWidth) / 2;
        percentage = current_position + offset;
        return that.jump_to_percentage(percentage, true);
      });
    };

    _Class.prototype.render = function() {
      var elements, item, most_recent, that;
      that = this;
      this._updateViewportPos();
      elements = [];
      most_recent;

      while (this.viewManager.hasRenderCandidate()) {
        item = this.viewManager.getNextElement();
        item.view = this.renderMore(item);
        if (item.model.get('date') <= moment()) {
          most_recent = item;
        }
        elements.push(item);
      }
      this.placeholder_right = $(window.yat.templates.timelineNavigationPlaceholder());
      this.placeholder_right.css('width', this.options.margin_right);
      this.elementList.append(this.placeholder_right);
      if (most_recent != null) {
        window.setTimeout(function() {
          return that.options.dispatcher.trigger('navigation_element_selected', most_recent.view);
        }, 100);
      }
      return this.repositionElements(elements);
    };

    _Class.prototype.renderMore = function(item) {
      var navElement, that;
      that = this;
      navElement = new window.yat.NavigationElementView({
        model: item.model,
        dispatcher: that.options.dispatcher
      });
      navElement.$el.attr("id", this.options.id_prefix + item.model.cid + this.options.id_postfix);
      this.elementList.append(navElement.$el);
      return navElement;
    };

    _Class.prototype.repositionElements = function(elements) {
      var that;
      that = this;
      this.line = this.options.margin_left;
      this.current_objects = [];
      return window.setTimeout(function() {
        var current_year, days, el, full_width, last_year, previous_year, quarters, years, _i, _j, _len, _ref, _ref1, _ref2, _ref3, _results;
        for (_i = 0, _len = elements.length; _i < _len; _i++) {
          el = elements[_i];
          this.callIndex = 0;
          that.arrange_element(el);
        }
        years = (function() {
          _results = [];
          for (var _j = _ref = that.startEnd.start.getFullYear(), _ref1 = that.startEnd.end.getFullYear(); _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; _ref <= _ref1 ? _j++ : _j--){ _results.push(_j); }
          return _results;
        }).apply(this);
        days = moment(that.startEnd.end).clone().diff(moment(that.startEnd.start), 'days') + 1;
        quarters = [];
        _.each(years, function(year) {
          quarters.push({
            start: moment([year, 0]),
            end: moment([year, 3])
          });
          quarters.push({
            start: moment([year, 3]),
            end: moment([year, 6])
          });
          quarters.push({
            start: moment([year, 6]),
            end: moment([year, 9])
          });
          return quarters.push({
            start: moment([year, 9]),
            end: moment([year + 1, 0])
          });
        });
        quarters = _.filter(quarters, function(quarter) {
          return that.startEnd.start <= quarter.end && quarter.start <= that.startEnd.end;
        });
        if (((_ref2 = _.first(quarters)) != null ? _ref2.start : void 0) < moment(that.startEnd.start)) {
          _.first(quarters).start = moment(that.startEnd.start);
        }
        if (((_ref3 = _.last(quarters)) != null ? _ref3.end : void 0) > moment(that.startEnd.end)) {
          _.last(quarters).end = moment(that.startEnd.end);
        }
        full_width = that.navigation_width - that.options.horizontal_offset + that.options.margin_right;
        _.each(quarters, function(quarter) {
          var first_el, quarter_pos;
          first_el = _.find(elements, function(el) {
            return quarter.start <= moment(el.model.get('date'));
          });
          quarter_pos = (first_el.pos.left - that.options.margin_left) - that.viewManager.pixelPerDay * moment(first_el.model.get('date')).diff(quarter.start, 'days');
          return quarter.left = Math.round((quarter_pos / full_width) * 1000) / 1000;
        });
        _.first(quarters).left = 0;
        years = [];
        current_year = null;
        _.each(quarters, function(quarter) {
          if (current_year !== quarter.start.year()) {
            current_year = quarter.start.year();
            quarter.quarters = [];
            return years.push(quarter);
          } else {
            return _.last(years).quarters.push(quarter);
          }
        });
        previous_year = null;
        _.each(years, function(y) {
          if (previous_year != null) {
            previous_year.width = Math.round((y.left - previous_year.left) * 1000) / 1000;
          }
          return previous_year = y;
        });
        last_year = _.last(years);
        last_year.width = Math.round((1 - last_year.left) * 1000) / 1000;
        return that.options.dispatcher.trigger('navigation_elements_positioned', years);
      }, 10);
    };

    _Class.prototype.arrange_element = function(element) {
      var shortest_right, success, that;
      that = this;
      success = false;
      if (!element.pos) {
        element.pos = {
          left: element.position,
          top: 0,
          height: parseInt(element.view.$el.height(), 10),
          width: parseInt(element.view.$el.width(), 10)
        };
      }
      element.pos.nextLeft = function() {
        return this.left + this.width + that.options.horizontal_offset;
      };
      element.pos.nextTop = function() {
        return this.top + this.height + that.options.vertical_offset;
      };
      if (element.pos.left > this.line) {
        this.line = element.pos.left;
      }
      this.cleanup_current_objects();
      if (this.current_objects.length === 0) {
        element.pos.top = 0;
        success = true;
      } else {
        shortest_right = _.min(this.current_objects, function(item) {
          return item.pos.nextLeft();
        });
        if (shortest_right != null) {
          shortest_right = shortest_right.pos.nextLeft();
        }
        this.current_objects = _.sortBy(this.current_objects, function(item) {
          return item.pos.top;
        });
        element.pos.left = this.line;
        element.pos.top = 0;
        if (this.position_is_valid(this.current_objects, element.pos)) {
          success = true;
        } else {
          _.each(this.current_objects, function(item) {
            var pos;
            pos = _.clone(element.pos);
            pos.left = this.line;
            pos.top = item.pos.nextTop();
            if (this.position_is_valid(this.current_objects, pos)) {
              element.pos.left = pos.left;
              element.pos.top = pos.top;
              return success = true;
            }
          }, this);
        }
      }
      if (success) {
        this.current_objects.push(element);
        this.current_objects = _.uniq(this.current_objects);
        element.view.$el.css('left', element.pos.left + 'px');
        element.view.$el.css('top', element.pos.top + 'px');
        this.placeholder_right.css('left', element.pos.left + element.pos.width);
        return this.navigation_width = element.pos.nextLeft();
      } else {
        if (shortest_right > this.line) {
          this.line = shortest_right;
        } else {
          this.line += this.options.horizontal_offset;
        }
        this.cleanup_current_objects();
        element.pos.top = 0;
        element.pos.left = this.line;
        return this.arrange_element(element);
      }
    };

    _Class.prototype.position_is_valid = function(elements, position) {
      var result;
      if (position.nextTop() < this.options.navigation_height + this.options.vertical_offset) {
        result = !_.some(elements, function(el) {
          return el.pos.left < position.nextLeft() && position.left < el.pos.nextLeft() && el.pos.top < position.nextTop() && position.top < el.pos.nextTop();
        });
        return result;
      } else {
        return false;
      }
    };

    _Class.prototype.cleanup_current_objects = function() {
      var start;
      start = this.current_objects.length;
      return this.current_objects = _.reject(this.current_objects, function(item) {
        return item.pos.nextLeft() <= this.line;
      }, this);
    };

    _Class.prototype.jump_to_percentage = function(percentage, animate) {
      var scrollLeft;
      scrollLeft = this.viewManager.get_offset_for_percentage(percentage);
      scrollLeft = this.percentage_to_offset(percentage);
      if (animate) {
        return this.mainElement.animate({
          scrollLeft: scrollLeft
        }, this.options.animation_duration);
      } else {
        return this.mainElement.scrollLeft(scrollLeft);
      }
    };

    _Class.prototype.jump_to = function(date, animate) {
      var scrollLeft;
      scrollLeft = this.viewManager.get_offset_for_date(date);
      if (animate) {
        return this.mainElement.animate({
          scrollLeft: scrollLeft
        }, this.options.animation_duration);
      } else {
        return this.mainElement.scrollLeft(scrollLeft);
      }
    };

    _Class.prototype.jump_to_cid = function(cid, animate) {
      var domElement, scrollLeft;
      domElement = this.get_element_by_cid(cid);
      if (domElement[0] !== void 0) {
        scrollLeft = domElement.position().left + domElement.width() / 2 - this.$el.outerWidth() / 2;
        if (animate) {
          return this.mainElement.animate({
            scrollLeft: scrollLeft
          }, this.options.animation_duration);
        } else {
          return this.mainElement.scrollLeft(scrollLeft);
        }
      }
    };

    _Class.prototype.get_element_by_cid = function(cid) {
      return $('#' + this.options.id_prefix + cid + this.options.id_postfix);
    };

    _Class.prototype.activate_elements = function(elements) {
      _.each(_activated_elements, function(link) {
        return link.removeClass('active');
      });
      _activated_elements = [];
      return _.each(elements, function(el) {
        var link;
        link = this.get_element_by_cid(el.model.cid).find('a');
        link.addClass('active');
        return _activated_elements.push(link);
      }, this);
    };

    return _Class;

  })(Backbone.View);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.yat = window.yat || {};

  window.yat.TimelineView = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.className = 'yat-inner';

    _Class.prototype.options = {
      id_prefix: ''
    };

    _Class.prototype.fullscreen_placeholder = void 0;

    _Class.prototype.fullscreen_button = void 0;

    _Class.prototype.fullscreen_button_end = void 0;

    _Class.prototype.compontent_load_counter = 0;

    _Class.prototype.initialize = function() {
      return this.render();
    };

    _Class.prototype.render = function() {
      var that;
      that = this;
      this.container = $(window.yat.templates.timelineContainer());
      this.container.addClass('loading');
      that.options.dispatcher.on('load_component_start', function() {
        return that.compontent_load_counter++;
      });
      that.options.dispatcher.on('load_component_end', function() {
        that.compontent_load_counter--;
        if (that.compontent_load_counter <= 0) {
          return that.container.removeClass('loading');
        }
      });
      this.$el.append(that.container);
      return window.setTimeout((function() {
        that.options.id_prefix = 'table' + _.random(0, 1000);
        that.viewport = new window.yat.ViewportView({
          model: that.model,
          dispatcher: that.options.dispatcher,
          id_prefix: that.options.id_prefix
        });
        that.overview = new window.yat.OverviewView({
          model: that.model.getStartEnd(),
          dispatcher: that.options.dispatcher
        });
        that.navigation = new window.yat.NavigationView({
          model: that.model,
          dispatcher: that.options.dispatcher,
          id_prefix: that.options.id_prefix,
          id_postfix: 'navigation'
        });
        that.navigation.$el.append(that.overview.$el);
        that.container.children('.yat-timeline-inner1').append(that.navigation.$el);
        that.container.children('.yat-timeline-inner1').append(that.viewport.$el);
        that.fullscreen_button = $(window.yat.templates.timelineFullScreen());
        that.fullscreen_button_end = $(window.yat.templates.timelineFullScreenEnd());
        that.fullscreen_button_end.hide();
        that.fullscreen_button.click(function() {
          return that.options.dispatcher.trigger('fullscreen_start');
        });
        that.fullscreen_button_end.click(function() {
          return that.options.dispatcher.trigger('fullscreen_end');
        });
        that.options.dispatcher.on('fullscreen_start', function() {
          return that.fullscreen_start();
        });
        that.options.dispatcher.on('fullscreen_end', function() {
          return that.fullscreen_end();
        });
        that.container.append(that.fullscreen_button);
        return that.container.append(that.fullscreen_button_end);
      }), 1);
    };

    _Class.prototype.fullscreen_start = function() {
      var container, current_element, that;
      that = this;
      current_element = that.viewport.getCurrentElement();
      that.$el.after('<div class="yat-fullscreen-placeholder" style="display:none" />');
      that.fullscreen_placeholder = that.$el.next();
      container = $('<div class="yat-fullscreen" id="yat-fullscreen-' + that.options.id_prefix + '" />');
      $('body').append(container);
      container.append(that.$el);
      that.viewport.insert_prev_element(that.viewport.getCurrentElements().length + 2);
      that.viewport.insert_next_element(that.viewport.getCurrentElements().length + 2);
      that.viewport.disable_load_more_till_scrollend = true;
      that.viewport.jump_to(current_element, true, (function() {
        return that.viewport.disable_load_more_till_scrollend = false;
      }));
      that.fullscreen_button_end.show();
      return that.fullscreen_button.hide();
    };

    _Class.prototype.fullscreen_end = function() {
      var current_element, that;
      that = this;
      current_element = that.viewport.getCurrentElement();
      that.fullscreen_placeholder.after(that.$el);
      $('#yat-fullscreen-' + that.options.id_prefix).remove();
      that.fullscreen_placeholder.remove();
      that.viewport.insert_prev_element(that.viewport.getCurrentElements().length + 2);
      that.viewport.insert_next_element(that.viewport.getCurrentElements().length + 2);
      that.viewport.disable_load_more_till_scrollend = true;
      that.viewport.jump_to(current_element, true, (function() {
        return that.viewport.disable_load_more_till_scrollend = false;
      }));
      that.fullscreen_button_end.hide();
      return that.fullscreen_button.show();
    };

    return _Class;

  })(Backbone.View);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.yat = window.yat || {};

  window.yat.Item = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.defaults = {
      category: "",
      content: "",
      date: "",
      important: false,
      shorttitle: "",
      tags: []
    };

    return _Class;

  })(Backbone.Model);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.yat = window.yat || {};

  window.yat.ItemList = (function(_super) {

    __extends(ItemList, _super);

    function ItemList() {
      return ItemList.__super__.constructor.apply(this, arguments);
    }

    ItemList.prototype.model = yat.Item;

    ItemList.prototype.comparator = function(item) {
      return item.get('date');
    };

    ItemList.prototype.getStartEnd = function() {
      return {
        start: this.at(0).get('date'),
        end: this.at(this.length - 1).get('date')
      };
    };

    return ItemList;

  })(Backbone.Collection);

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {

  window.yat = window.yat || {};

  window.yat.App = (function() {

    function _Class(options) {
      this.dispatcher = _.extend({}, Backbone.Events);
      this.dispatcher.on('all', function() {});
      this.items = new window.yat.ItemList(options.items);
      this.timelineView = new window.yat.TimelineView({
        el: options.containerElement,
        model: this.items,
        dispatcher: this.dispatcher
      });
    }

    return _Class;

  })();

}).call(this);

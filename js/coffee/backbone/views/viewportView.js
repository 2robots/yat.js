// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.yat = window.yat || {};

  window.yat.ViewportView = (function(_super) {

    __extends(_Class, _super);

    function _Class() {
      return _Class.__super__.constructor.apply(this, arguments);
    }

    _Class.prototype.className = 'yat-viewport';

    _Class.prototype.initialize = function() {
      return this.render();
    };

    _Class.prototype.remove = function() {
      return Backbone.View.prototype.remove.call(this);
    };

    _Class.prototype.render = function() {
      var navlinks, viewport;
      viewport = $(window.yat.templates.timelineViewportElementList());
      this.model.each(function(item) {
        var view;
        view = new window.yat.viewportItemView({
          model: item
        });
        return viewport.children().append(view.$el);
      });
      navlinks = $(window.yat.templates.timelineViewportNavlinks());
      this.$el.html(viewport);
      this.$el.append(navlinks);
      return this.registerEventListener();
    };

    _Class.prototype.registerEventListener = function() {
      var that;
      that = this;
      this.$el.find('> .yat-inner').bind('touchmove', function() {
        return that.options.dispatcher.trigger('viewport_position_change');
      });
      this.$el.find('> .yat-inner').scroll(function() {
        return that.options.dispatcher.trigger('viewport_position_change');
      });
      this.$el.find('ol.yat-elements').children().click(function() {
        return that.options.dispatcher.trigger('viewport_item_select', $(this));
      });
      this.$el.find('.yat-navlinks .yat-left a').click(function() {
        return that.options.dispatcher.trigger('viewport_prev');
      });
      this.$el.find('.yat-navlinks .yat-right a').click(function() {
        return that.options.dispatcher.trigger('viewport_next');
      });
      that.options.dispatcher.on('viewport_jump_to', function() {
        return that.jump_to(arguments[0]);
      });
      that.options.dispatcher.on('viewport_prev', function() {
        return that.options.dispatcher.trigger('viewport_jump_to', that.getCurrentElement().prev());
      });
      that.options.dispatcher.on('viewport_next', function() {
        return that.options.dispatcher.trigger('viewport_jump_to', that.getCurrentElement().next());
      });
      return that.options.dispatcher.on('viewport_item_select', function() {
        return that.open_element(arguments[0]);
      });
    };

    _Class.prototype.getCurrentElement = function() {
      var current_element, scroll_l, scroll_r;
      scroll_l = this.$el.find('> .yat-inner').scrollLeft();
      scroll_r = scroll_l + this.$el.find('> .yat-inner').width();
      current_element = null;
      this.$el.find('ol.yat-elements').children().each(function() {
        if ($(this).position().left >= scroll_l && $(this).position().left <= scroll_r) {
          current_element = $(this);
          return false;
        }
      });
      return current_element;
    };

    _Class.prototype.jump_to = function() {
      return this.$el.find('> .yat-inner').animate({
        scrollLeft: arguments[0].position().left
      }, {
        duration: 100
      });
    };

    _Class.prototype.open_element = function() {
      arguments[0].toggleClass('open');
      return this.$el.find('ol.yat-elements').children(':not(.open)').each(function() {
        return $(this).removeClass('open');
      });
    };

    return _Class;

  })(Backbone.View);

}).call(this);
